#!/usr/bin/env python

"""0/1 Knapsack Problem"""


from collections import namedtuple


Item = namedtuple('Item', 'w, v')


def main():
    items = [Item(2, 5), Item(3, 4), Item(4, 7), Item(5, 11), Item(8, 3), Item(9, 8)]
    cap = 13

    print "packing maximum value of items %s" % ", ".join(str(x) for x in items)
    print "into a pack of capacity %d" % cap
    print "..."

    con, v = pack(items, cap)

    print "(contents: %s; value: %d)" % (", ".join(str(x) for x in con), v)


Memo = namedtuple('Memo', 'v, itm, p')


def pack(items, cap):
    s = {} # indexed by (#items, knapsack_capacity)

    for c in range(0, cap+1):
        s[(0, c)] = Memo(0, None, None)

    for i in range(1, len(items)+1):
        itm = items[i-1]
        for c in range(0, cap+1):
            if itm.w <= c:
                ma = s[(i-1, c)]
                mb = s[(i-1, c-itm.w)]
                if mb.v + itm.v > ma.v:
                    s[(i, c)] = Memo(mb.v + itm.v, itm, mb)
                else:
                    s[(i, c)] = ma
            else:
                s[(i, c)] = s[(i-1, c)]

    # Recover solution
    r = s[(i, c)]
    v = r.v

    if r.itm is None:
        return [], 0

    if r.p is None:
        return r.itm, r.v

    con = []
    while r.p is not None:
        con.append(r.itm)
        r = r.p

    return con, v


if __name__ == '__main__':
    main()
